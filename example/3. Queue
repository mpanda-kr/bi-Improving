from multiprocessing import Process, Queue
 
sentinel = -1
 
def creator(q, data):
    """
    Creates data to be consumed and waits for the consumer
    to finish processing
    """
    print('Creating data and putting it on the queue')
    test1 = "test1"
    test2 = "test2"
    test3 = "test3"
    test4 = "test4"
    test5 = "test5"
    
    test_list = [test1,test2,test3,test4,test5]
    for item in data:
 
        q.put(test_list)
 
 
def my_consumer(q):
    """
    Consumes some data and works on it
 
    In this case, all it does is double the input
    """
    while True:
        data = q.get()
        print('data found to be processed: {}'.format(data))
        processed = data * 2
        print(processed)
 
        if data is sentinel:
            break
 
 
if __name__ == '__main__':
    q = Queue()
    data = [5, 10, 13, -1]
    process_one = Process(target=creator, args=(q,data))
    process_two = Process(target=my_consumer, args=(q,))
    process_one.start()
    process_two.start()
 
    q.close()
    q.join_thread()
 
    process_one.join()
    process_two.join()